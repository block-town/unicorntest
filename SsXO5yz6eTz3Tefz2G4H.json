{
  "history": [
    {
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "gradient",
      "speed": 1,
      "trackMouse": 0,
      "mouseMomentum": 0,
      "animating": false,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float;in vec2 vTextureCoord;const vec3 uColors[1] = vec3[]( vec3(1.000000, 0.968627, 0.945098) );uniform vec2 uMousePos; uniform vec2 uResolution;vec2 rotate(vec2 coord, float angle) { float s = sin(angle); float c = cos(angle); return vec2( coord.x * c - coord.y * s, coord.x * s + coord.y * c ); }out vec4 fragColor;vec3 getColor(vec2 uv) { return uColors[0]; }void main() { vec2 uv = vTextureCoord; vec2 res = uResolution; vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.00); uv -= pos; uv /= (0.52*2.); uv = rotate(uv, (0.20 - 0.5) * 2. * 3.14159265); vec4 color = vec4(getColor(uv), 1); fragColor = color; }"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vTextureCoord = aTextureCoord; }"
      ],
      "data": { "depth": false }
    },
    {
      "local": {
        "id": "4ee0634d-a250-4af4-9652-5a2709f73b7c",
        "canvas": {},
        "ctx": {}
      },
      "visible": true,
      "locked": false,
      "aspectRatio": 1.5470008952551477,
      "layerName": "",
      "isElement": true,
      "opacity": 1,
      "displace": 0,
      "trackMouse": 0,
      "mouseMomentum": 0,
      "blendMode": "NORMAL",
      "bgDisplace": 0,
      "mask": 0,
      "maskBackground": { "type": "Vec3", "_x": 0, "_y": 0, "_z": 0 },
      "maskAlpha": 0,
      "maskDepth": 0,
      "dispersion": 0,
      "axisTilt": 0,
      "layerType": "shape",
      "borderRadius": 0,
      "coords": [
        [-141, -19],
        [539, -19],
        [539, 1061],
        [-141, 1061]
      ],
      "effects": [],
      "fill": ["#050505"],
      "gradientAngle": 0,
      "gradientType": "linear",
      "rotation": 0,
      "translateX": 141.5,
      "translateY": 20,
      "type": "rectangle",
      "numSides": 3,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float; in vec2 vTextureCoord; in vec3 vVertexPosition;uniform sampler2D uBgTexture; uniform sampler2D uTexture; uniform vec2 uMousePos; uniform int uSampleBg;out vec4 fragColor;void main() { vec2 uv = vTextureCoord; vec2 pos = mix(vec2(0), (uMousePos - 0.5), 0.00);uv = uv - pos;vec4 color = texture(uTexture, uv); vec4 background = vec4(0);if(uSampleBg == 1) { background = texture(uBgTexture, vTextureCoord); }color = mix(background, color / max(color.a, 0.0001), color.a * 1.00);fragColor = color; }"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform mat4 uTextureMatrix; uniform vec2 uMousePos;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { float angleX = uMousePos.y * 0.5 - 0.25; float angleY = (1.-uMousePos.x) * 0.5 - 0.25; mat4 rotateX = mat4(1.0, 0.0, 0.0, 0.0, 0.0, cos(angleX), -sin(angleX), 0.0, 0.0, sin(angleX), cos(angleX), 0.0, 0.0, 0.0, 0.0, 1.0); mat4 rotateY = mat4(cos(angleY), 0.0, sin(angleY), 0.0, 0.0, 1.0, 0.0, 0.0, -sin(angleY), 0.0, cos(angleY), 0.0, 0.0, 0.0, 0.0, 1.0);mat4 rotationMatrix = rotateX * rotateY; gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vVertexPosition = (rotationMatrix * vec4(aVertexPosition, 1.0)).xyz; vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy; }"
      ]
    },
    {
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "blur",
      "trackMouse": 0,
      "mouseMomentum": 0,
      "animating": false,
      "isMask": 0,
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float;in vec3 vVertexPosition; in vec2 vTextureCoord;uniform sampler2D uTexture; uniform vec2 uMousePos; uniform vec2 uResolution; float ease (int easingFunc, float t) { return t; }out vec4 fragColor;float random(vec2 seed) { return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453); }const int kernelSize = 36; const float gaussianWeights[kernelSize] = float[](0.00094768, 0.00151965, 0.00237008, 0.00359517, 0.0053041, 0.00761097, 0.01062197, 0.01441804, 0.01903459, 0.0244409, 0.03052299, 0.03707432, 0.04379813, 0.05032389, 0.05623791, 0.06112521, 0.06461716, 0.06643724, 0.06643724, 0.06461716, 0.06112521, 0.05623791, 0.05032389, 0.04379813, 0.03707432, 0.03052299, 0.0244409, 0.01903459, 0.01441804, 0.01062197, 0.00761097, 0.0053041, 0.00359517, 0.00237008, 0.00151965, 0.00094768);vec4 GaussianBlur(sampler2D tex, vec2 uv, vec2 direction) { vec4 color = vec4(0.0); vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.00); float inner = distance(uv, pos); float outer = max(0., 1.-distance(uv, pos));float amt = 0 <= 1 ? 6. : 11.; float amount = (1.00 * amt) * ease(0, mix(inner, outer, 1.00)); color += texture(tex, uv) * gaussianWeights[0]; for (int i = 0; i < kernelSize; i++) { float x = float(i - kernelSize / 2) * amount; color += texture(tex, uv + vec2(x * 0.001) * direction * vec2(0.50, 1. - 0.50)) * gaussianWeights[i]; }float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0; color.rgb += dither; return color; }vec4 blur(vec2 uv, vec2 direction) { return GaussianBlur(uTexture, uv, direction); }void main() { vec2 uv = vTextureCoord; vec4 color = vec4(0); int dir = 0 % 2; vec2 direction = dir == 1 ? vec2(0, uResolution.x/uResolution.y) : vec2(1, 0);color = blur(uv, direction); fragColor = color;}",
        "#version 300 es\nprecision mediump float;in vec3 vVertexPosition; in vec2 vTextureCoord;uniform sampler2D uTexture; uniform vec2 uMousePos; uniform vec2 uResolution; float ease (int easingFunc, float t) { return t; }out vec4 fragColor;float random(vec2 seed) { return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453); }const int kernelSize = 36; const float gaussianWeights[kernelSize] = float[](0.00094768, 0.00151965, 0.00237008, 0.00359517, 0.0053041, 0.00761097, 0.01062197, 0.01441804, 0.01903459, 0.0244409, 0.03052299, 0.03707432, 0.04379813, 0.05032389, 0.05623791, 0.06112521, 0.06461716, 0.06643724, 0.06643724, 0.06461716, 0.06112521, 0.05623791, 0.05032389, 0.04379813, 0.03707432, 0.03052299, 0.0244409, 0.01903459, 0.01441804, 0.01062197, 0.00761097, 0.0053041, 0.00359517, 0.00237008, 0.00151965, 0.00094768);vec4 GaussianBlur(sampler2D tex, vec2 uv, vec2 direction) { vec4 color = vec4(0.0); vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.00); float inner = distance(uv, pos); float outer = max(0., 1.-distance(uv, pos));float amt = 1 <= 1 ? 6. : 11.; float amount = (1.00 * amt) * ease(0, mix(inner, outer, 1.00)); color += texture(tex, uv) * gaussianWeights[0]; for (int i = 0; i < kernelSize; i++) { float x = float(i - kernelSize / 2) * amount; color += texture(tex, uv + vec2(x * 0.001) * direction * vec2(0.50, 1. - 0.50)) * gaussianWeights[i]; }float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0; color.rgb += dither; return color; }vec4 blur(vec2 uv, vec2 direction) { return GaussianBlur(uTexture, uv, direction); }void main() { vec2 uv = vTextureCoord; vec4 color = vec4(0); int dir = 1 % 2; vec2 direction = dir == 1 ? vec2(0, uResolution.x/uResolution.y) : vec2(1, 0);color = blur(uv, direction); fragColor = color;}",
        "#version 300 es\nprecision mediump float;in vec3 vVertexPosition; in vec2 vTextureCoord;uniform sampler2D uTexture; uniform vec2 uMousePos; uniform vec2 uResolution; float ease (int easingFunc, float t) { return t; }out vec4 fragColor;float random(vec2 seed) { return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453); }const int kernelSize = 36; const float gaussianWeights[kernelSize] = float[](0.00094768, 0.00151965, 0.00237008, 0.00359517, 0.0053041, 0.00761097, 0.01062197, 0.01441804, 0.01903459, 0.0244409, 0.03052299, 0.03707432, 0.04379813, 0.05032389, 0.05623791, 0.06112521, 0.06461716, 0.06643724, 0.06643724, 0.06461716, 0.06112521, 0.05623791, 0.05032389, 0.04379813, 0.03707432, 0.03052299, 0.0244409, 0.01903459, 0.01441804, 0.01062197, 0.00761097, 0.0053041, 0.00359517, 0.00237008, 0.00151965, 0.00094768);vec4 GaussianBlur(sampler2D tex, vec2 uv, vec2 direction) { vec4 color = vec4(0.0); vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.00); float inner = distance(uv, pos); float outer = max(0., 1.-distance(uv, pos));float amt = 2 <= 1 ? 6. : 11.; float amount = (1.00 * amt) * ease(0, mix(inner, outer, 1.00)); color += texture(tex, uv) * gaussianWeights[0]; for (int i = 0; i < kernelSize; i++) { float x = float(i - kernelSize / 2) * amount; color += texture(tex, uv + vec2(x * 0.001) * direction * vec2(0.50, 1. - 0.50)) * gaussianWeights[i]; }float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0; color.rgb += dither; return color; }vec4 blur(vec2 uv, vec2 direction) { return GaussianBlur(uTexture, uv, direction); }void main() { vec2 uv = vTextureCoord; vec4 color = vec4(0); int dir = 2 % 2; vec2 direction = dir == 1 ? vec2(0, uResolution.x/uResolution.y) : vec2(1, 0);color = blur(uv, direction); fragColor = color;}",
        "#version 300 es\nprecision mediump float;in vec3 vVertexPosition; in vec2 vTextureCoord;uniform sampler2D uTexture; uniform vec2 uMousePos; uniform vec2 uResolution; float ease (int easingFunc, float t) { return t; }out vec4 fragColor;float random(vec2 seed) { return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453); }const int kernelSize = 36; const float gaussianWeights[kernelSize] = float[](0.00094768, 0.00151965, 0.00237008, 0.00359517, 0.0053041, 0.00761097, 0.01062197, 0.01441804, 0.01903459, 0.0244409, 0.03052299, 0.03707432, 0.04379813, 0.05032389, 0.05623791, 0.06112521, 0.06461716, 0.06643724, 0.06643724, 0.06461716, 0.06112521, 0.05623791, 0.05032389, 0.04379813, 0.03707432, 0.03052299, 0.0244409, 0.01903459, 0.01441804, 0.01062197, 0.00761097, 0.0053041, 0.00359517, 0.00237008, 0.00151965, 0.00094768);vec4 GaussianBlur(sampler2D tex, vec2 uv, vec2 direction) { vec4 color = vec4(0.0); vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.00); float inner = distance(uv, pos); float outer = max(0., 1.-distance(uv, pos));float amt = 3 <= 1 ? 6. : 11.; float amount = (1.00 * amt) * ease(0, mix(inner, outer, 1.00)); color += texture(tex, uv) * gaussianWeights[0]; for (int i = 0; i < kernelSize; i++) { float x = float(i - kernelSize / 2) * amount; color += texture(tex, uv + vec2(x * 0.001) * direction * vec2(0.50, 1. - 0.50)) * gaussianWeights[i]; }float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0; color.rgb += dither; return color; }vec4 blur(vec2 uv, vec2 direction) { return GaussianBlur(uTexture, uv, direction); }void main() { vec2 uv = vTextureCoord; vec4 color = vec4(0); int dir = 3 % 2; vec2 direction = dir == 1 ? vec2(0, uResolution.x/uResolution.y) : vec2(1, 0);color = blur(uv, direction); fragColor = color;}"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform mat4 uTextureMatrix;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy; }"
      ],
      "data": {
        "downSample": true,
        "depth": false,
        "passes": [
          { "prop": "vertical", "value": 1, "downSample": true },
          { "prop": "vertical", "value": 2, "downSample": true },
          { "prop": "vertical", "value": 3, "downSample": true }
        ]
      }
    },
    {
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "beam",
      "radius": 0.9500000000000001,
      "speed": 0.25,
      "trackMouse": 0.03,
      "mouseMomentum": 0,
      "animating": false,
      "isMask": 0,
      "states": {
        "appear": [],
        "scroll": [
          {
            "type": "scroll",
            "id": "fefc8a75-5aef-4b57-8b7f-5d9209cb6ca8",
            "prop": "radius",
            "progress": 0,
            "momentum": 0.25,
            "range": 0.34,
            "offset": 0.32,
            "mode": "scrollIntoView",
            "delta": 0.01,
            "sceneTop": 0,
            "startScroll": 0,
            "endScroll": 0,
            "lastScrollTop": 0,
            "absScrollValue": true,
            "value": 0.3,
            "uniformData": { "type": "1f", "name": "uRadius" }
          }
        ]
      },
      "compiledFragmentShaders": [
        "#version 300 es\nprecision mediump float;in vec2 vTextureCoord;uniform sampler2D uTexture;uniform float uRadius; uniform float uTime;uniform vec2 uMousePos; uniform vec2 uResolution; vec3 blend (int blendMode, vec3 src, vec3 dst) { return src + dst; }vec3 Tonemap_tanh(vec3 x) { x = clamp(x, -40.0, 40.0); return (exp(x) - exp(-x)) / (exp(x) + exp(-x)); }float random(vec2 seed) { return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453); }out vec4 fragColor;const float PI = 3.14159265359; const float TWO_PI = 2.0 * PI;mat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }vec3 drawExpandingRings(vec2 uv, vec2 center, float scale, float angle) { uv.x *= uResolution.x/uResolution.y; center.x *= uResolution.x/uResolution.y; vec2 skew = vec2(0.50, 1.-0.50) * 2.; uv = uv * rot(-0.15 * TWO_PI) * skew; center = center * rot(-0.15 * TWO_PI) * skew; float modulo = fract(uTime * 0.02 + 0.50); float ringRadius = scale * 0.5 * modulo; float distFromCenter = length(uv - center); float ringDist = abs(distFromCenter - ringRadius); float lineRadius = 0.28 * modulo; float brightness = lineRadius / (1.0 - smoothstep(0.2, 0.002, ringDist + 0.02));brightness = brightness * max(0., 1.-modulo);vec3 ringColor = brightness * pow(1.-ringDist, 3.) * vec3(0, 0.5058823529411764, 0.9686274509803922); return ringColor; }vec3 getBeam(vec2 uv) { vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), 0.03); return drawExpandingRings(uv, pos, uRadius, -0.15); }void main() { vec2 uv = vTextureCoord; vec4 bg = texture(uTexture, uv); vec3 beam = getBeam(uv); float dither = (random(gl_FragCoord.xy) - 0.5) / 255.0;vec3 blended = blend(1, Tonemap_tanh(beam), bg.rgb); vec3 result = mix(bg.rgb, blended, 1.00); result += dither;fragColor = vec4(result, bg.a); }"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform mat4 uTextureMatrix;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy; }"
      ],
      "data": { "depth": false }
    },
    {
      "visible": true,
      "aspectRatio": 1,
      "layerType": "effect",
      "type": "sdf_shape",
      "texture": {
        "thumb": "https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/wS8UOorJd8Vb9VVTCtzGYnfBZk92%2Fhardhat-logo-dark_%40thumbnail.svg?alt=media&token=5a2df766-0d10-41f7-a45d-70b152968abf",
        "name": "hardhat-logo-dark.svg",
        "src": "https://assets.unicorn.studio/images/wS8UOorJd8Vb9VVTCtzGYnfBZk92/hardhat-logo-dark_msdf_1723218659050.png",
        "svgSrc": "https://firebasestorage.googleapis.com/v0/b/unicorn-studio.appspot.com/o/wS8UOorJd8Vb9VVTCtzGYnfBZk92%2Fhardhat-logo-dark.svg?alt=media&token=5a2df766-0d10-41f7-a45d-70b152968abf",
        "sampler": "uCustomTexture"
      },
      "textureAmount": 0,
      "fillOpacity": 1,
      "speed": 0.69,
      "trackMouseMove": 1,
      "mouseMomentum": 1,
      "trackMouse": 3.5,
      "animating": false,
      "isMask": 0,
      "states": {
        "appear": [
          {
            "type": "appear",
            "id": "0ebf5a0f-4f9f-402e-be7c-a3f49455104c",
            "prop": "trackMouseMove",
            "value": 0,
            "transition": {
              "ease": "easeInOutQuart",
              "delay": 500,
              "duration": 1000
            },
            "complete": false,
            "progress": 0,
            "initialStateSet": false,
            "uniformData": { "type": "1f", "name": "uTrackMouseMove" }
          }
        ],
        "scroll": [
          {
            "type": "scroll",
            "id": "f267e94b-ee44-4b8f-85af-f807c7257203",
            "prop": "fillOpacity",
            "progress": 0,
            "momentum": 1,
            "range": 0.34,
            "offset": 0.34,
            "mode": "scrollIntoView",
            "delta": 0.01,
            "sceneTop": 0,
            "startScroll": 0,
            "endScroll": 0,
            "lastScrollTop": 0,
            "absScrollValue": true,
            "value": 0,
            "uniformData": { "type": "1f", "name": "uOpacity" }
          },
          {
            "type": "scroll",
            "id": "df4147a7-4da0-4c36-b7b2-c34baf7d798b",
            "prop": "textureAmount",
            "progress": 0,
            "momentum": 1,
            "range": 0.34,
            "offset": 0.34,
            "mode": "scrollIntoView",
            "delta": 0.01,
            "sceneTop": 0,
            "startScroll": 0,
            "endScroll": 0,
            "lastScrollTop": 0,
            "absScrollValue": true,
            "value": 0,
            "uniformData": { "type": "1f", "name": "uTextureAmount" }
          }
        ]
      },
      "compiledFragmentShaders": [
        "#version 300 es\nprecision highp float;in vec2 vTextureCoord; uniform sampler2D uTexture;uniform float uOpacity; uniform float uTrackMouseMove; uniform float uTextureAmount; uniform float uTime;uniform vec2 uMousePos; uniform vec2 uResolution;const float PI = 3.141592653; const float PI2 = 6.283185306; const float DISP_STEPS = 12.; const vec3 viewDir = vec3(0,0, -4.25);float rand(vec2 co) { return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453); }mat3 rotY(float ang) { float c = cos(ang), s = sin(ang); return mat3(c, 0.0, s, 0.0, 1.0, 0.0, -s, 0.0, c); }mat3 rotX(float ang) { float c = cos(ang), s = sin(ang); return mat3(1.0, 0.0, 0.0, 0.0, c, -s, 0.0, s, c); }mat3 rotZ(float ang) { float c = cos(ang), s = sin(ang); return mat3(c, -s, 0.0, s, c, 0.0, 0.0, 0.0, 1.0); }vec3 twistY(vec3 p, float amount) { float c = cos(amount * p.y); float s = sin(amount * p.y); mat2 m = mat2(c, -s, s, c); return vec3(m * p.xz, p.y); }vec3 twistX(vec3 p, float amount) { float c = cos(amount * p.x); float s = sin(amount * p.x); mat2 m = mat2(c, -s, s, c); return vec3(p.x, m * p.yz); }float opSmoothUnion( float d1, float d2, float k ) { float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ); return mix( d2, d1, h ) - k*h*(1.0-h); }float sdfCylinderX(vec3 p, float radius, float height) { vec2 d = abs(vec2(length(p.yz) - radius, p.x)) - vec2(radius, height * 0.5); return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)); }float sdfCylinderY(vec3 p, float radius, float height) { vec2 d = abs(vec2(length(p.xz) - radius, p.y)) - vec2(radius, height * 0.5); return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)); }float sdfCylinderZ(vec3 p, float radius, float height) { vec2 d = abs(vec2(length(p.xy) - radius, p.z)) - vec2(radius, height * 0.5); return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)); }float sdfMergedCylinders(vec3 p, float radius, float height) { float dX = sdfCylinderX(p, radius, height); float dY = sdfCylinderY(p, radius, height); float dZ = sdfCylinderZ(p, radius, height); return opSmoothUnion(opSmoothUnion(dX, dY, 0.5), dZ, 0.5); }float sdStar5(vec2 p, float r, float rf) { const vec2 k1 = vec2(0.809016994375, -0.587785252292); const vec2 k2 = vec2(-k1.x,k1.y); p.x = abs(p.x); p -= 2.0*max(dot(k1,p),0.0)*k1; p -= 2.0*max(dot(k2,p),0.0)*k2; p.x = abs(p.x); p.y -= r; vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1); float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r ); return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y); }vec3 metalPattern(vec3 x) { float len = abs(length(x - vec3(vec2(0.5, 0.5), 0))); x *= 5.; vec3 result = vec3( sin(x.x + x.z) * sin(x.y + x.z), sin(x.y + x.z) * sin(x.x + x.y), sin(x.x + x.y) * sin(x.x + x.z) ) * 0.5 + 0.5; return (normalize(result)); }vec3 getSurfaceTexture(vec3 coord, float frequency) { return metalPattern(coord * frequency); }vec3 getRepeat(vec3 p) { float spacing = (0.50 + 0.11 * 0.38) * 8.; return p; }vec3 getThreeDRepeat(vec3 p) { float spacing = (0.50 + 0.11 * 0.38) * 8.; return p; }vec3 getAdjustedP(vec3 p) {
    vec3 adjustedP = p;
    vec2 twist = vec2(0, 0);
    
    adjustedP /= (0.06 + 0.01);
    adjustedP.xy *= vec2(uResolution.x / uResolution.y, 1);
    adjustedP *= (1. + (0.11 + 0.01));
    vec2 mousePos = mix(vec2(0), uMousePos - 0.5, 3.50);
    vec2 axis = vec2(-1. * vec3(0.4977611724272233, 0.4964157706093191, 0.6291).y - 1. + mousePos.y / PI, 
                     vec3(0.4977611724272233, 0.4964157706093191, 0.6291).x + mousePos.x / PI) * 2.;
    
    adjustedP = getRepeat(adjustedP);
    
    // Ensure the top of the shape does not go above the top of the frame
    adjustedP.y = max(adjustedP.y, 0.0);
    
    float baseTime = uTime * 0.02;
    float timeX = vec3(1, 0, 0).x * baseTime;
    float timeY = vec3(1, 0, 0).y * baseTime;
    float timeZ = vec3(1, 0, 0).z * baseTime;
    
    mat3 rotYMat = rotY(axis.y * PI);
    mat3 rotXMat = rotX(axis.x * PI);
    mat3 rotZMat = rotZ(vec3(0.4977611724272233, 0.4964157706093191, 0.6291).z * 2.0 * PI);
    mat3 animateYMat = rotY(timeY);
    mat3 animateXMat = rotX(timeX);
    mat3 animateZMat = rotZ(timeZ);
    
    mat3 combinedRotation = rotZMat * rotYMat * rotXMat;
    mat3 combinedAnimation = animateZMat * animateYMat * animateXMat;
    
    adjustedP = combinedRotation * adjustedP;
    adjustedP = combinedAnimation * adjustedP;
    adjustedP = getThreeDRepeat(adjustedP);
    adjustedP = mix(adjustedP, twistY(adjustedP, -1.0 * twist.y), step(0.0, abs(twist.y)));
    adjustedP = mix(adjustedP, twistX(adjustedP, -1.0 * twist.x), step(0.0, abs(twist.x)));
    
    if (uTextureAmount > 0.0) {
        adjustedP += getSurfaceTexture(adjustedP, 20. * 0.01) * 0.025 * uTextureAmount;
    }
    
    return adjustedP;
}
 float getMergedSDF(vec3 p) { p = getAdjustedP(p); return sdfMergedCylinders(p, 0.2, 1. + 3. * 0.95); }float fresnel(vec3 eyeVector, vec3 worldNormal, float power) { float fresnelFactor = abs(dot(eyeVector, worldNormal)); float inversefresnelFactor = 1.0 - fresnelFactor; return pow(inversefresnelFactor, power); }vec3 frostOrDispersion(vec3 rd, vec3 normal) { vec3 refractionColor = vec3(0); float iorBase = 1. + 0.94 * 0.25;vec3 dispCoefficients = vec3(0.03, 0.06, 0.1) * 0.24 * 1.2;for(float i = 0.; i < DISP_STEPS; i++) { float step = i / DISP_STEPS; vec3 disp = step * dispCoefficients; vec3 ior = 1.0 / (iorBase + disp);vec3 refractedRayR = refract(rd, normal, ior.r); vec3 refractedRayG = refract(rd, normal, ior.g); vec3 refractedRayB = refract(rd, normal, ior.b);refractionColor.r += texture(uTexture, vTextureCoord - refractedRayR.xy).r; refractionColor.g += texture(uTexture, vTextureCoord - refractedRayG.xy).g; refractionColor.b += texture(uTexture, vTextureCoord - refractedRayB.xy).b; }return clamp(refractionColor / DISP_STEPS, 0.0, 1.0); }vec3 calculateNormal(vec3 p, float eps) { vec2 e = vec2(1.0, -1.0) * eps; return normalize( e.xyy * getMergedSDF(p + e.xyy) + e.yyx * getMergedSDF(p + e.yyx) + e.yxy * getMergedSDF(p + e.yxy) + e.xxx * getMergedSDF(p + e.xxx) ); }vec3 sampleTexture(vec3 rd, vec3 normal) { if(uOpacity == 1.0) { return vec3(0); }return frostOrDispersion(rd, normal); }float scene(vec3 p) { return max(0., getMergedSDF(p) - 0.11) * (0.06 + 0.01); }const int STEPS = 128; const float MAX_DISTANCE = 40.0;vec4 rayMarch(vec3 ro, vec3 rd, float min_dist) {float traveled = 0.; vec3 entryPoint = vec3(0.0); vec3 entryNormal = vec3(0.0); float partialAlpha = 0.0; float antialias_dist = min_dist + min_dist * 0.25;for (int i = 0; i < STEPS; ++i) { vec3 currentPos = ro + rd * traveled; float distance = scene(currentPos); if (distance < min_dist) { entryPoint = currentPos; partialAlpha = 1.0; entryNormal = calculateNormal(entryPoint, min_dist); break; } else if(distance < antialias_dist) { partialAlpha = 0.5; entryPoint = currentPos; entryNormal = calculateNormal(entryPoint, distance); }if(traveled < 0.05) { traveled += distance * 0.9; } else { traveled += distance; } if (traveled > MAX_DISTANCE) break; }if (partialAlpha == 0.0) { return texture(uTexture, vTextureCoord); }vec4 bg = texture(uTexture, vTextureCoord);vec3 samplePosition = mix(rd, entryPoint, 0.00); vec3 refractionColor = sampleTexture(samplePosition, entryNormal);vec3 lightDir = vec3(((vec2(vec2(0.25, 0.25).x, 1.-vec2(0.25, 0.25).y) - 0.333) * 3.) - vec2(0.5, 0.5), -3.0);float lightAndShadow = dot(entryNormal, lightDir) * 0.25 + 0.25; vec3 lightColor = mix(vec3(1), vec3(0, 0, 0), 1. - uOpacity); vec3 fresnelEffect = fresnel(rd, entryNormal, 8.0) * 0.23 * vec3(0, 0, 0); vec3 halfwayDir = normalize(lightDir + rd); float specFactor = pow(max(dot(entryNormal, halfwayDir), 0.0), 64.0 * 1.00 + 0.01); vec3 specularEffect = specFactor * 1.00 * lightColor; vec3 combinedEffects = fresnelEffect + specularEffect; vec3 finalColor = mix(refractionColor, vec3(0, 0, 0) * lightAndShadow, uOpacity); finalColor += combinedEffects; vec4 outputColor = mix(bg, vec4(finalColor, 1.0), partialAlpha);return outputColor; }out vec4 fragColor;void main() { vec2 pos = vec2(0.5, 0.5) + mix(vec2(0), (uMousePos-0.5), uTrackMouseMove); vec2 uv = vTextureCoord - pos; float fovFactor = tan(radians(20.) * 0.5); vec3 rd = vec3(uv * fovFactor, 0.5);float mdist = 4. / uResolution.y; vec4 col = rayMarch(viewDir, rd, mdist); float dither = (rand(vTextureCoord.xy) - 0.5) / 255.0; col += dither; fragColor = col;}"
      ],
      "compiledVertexShaders": [
        "#version 300 es\nprecision mediump float;in vec3 aVertexPosition; in vec2 aTextureCoord;uniform mat4 uMVMatrix; uniform mat4 uPMatrix; uniform mat4 uTextureMatrix;out vec2 vTextureCoord; out vec3 vVertexPosition;void main() { gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0); vTextureCoord = (uTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy; }"
      ],
      "data": { "depth": false }
    }
  ],
  "options": {
    "name": "SECTION 0 BLACK SHAPE",
    "fps": 60,
    "dpi": 2,
    "scale": 0.2,
    "includeLogo": false,
    "isProduction": false,
    "version": "1.2.8"
  },
  "version": "1.2.8"
}
